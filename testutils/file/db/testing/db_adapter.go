// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/soda/multi-cloud/file/pkg/model"
)

// DBAdapter is an autogenerated mock type for the DBAdapter type
type DBAdapter struct {
	mock.Mock
}

// CreateFileShare provides a mock function with given fields: ctx, fileshare
func (_m *DBAdapter) CreateFileShare(ctx context.Context, fileshare *model.FileShare) (*model.FileShare, error) {
	ret := _m.Called(ctx, fileshare)

	var r0 *model.FileShare
	if rf, ok := ret.Get(0).(func(context.Context, *model.FileShare) *model.FileShare); ok {
		r0 = rf(ctx, fileshare)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FileShare)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.FileShare) error); ok {
		r1 = rf(ctx, fileshare)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFileShare provides a mock function with given fields: ctx, id
func (_m *DBAdapter) DeleteFileShare(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFileShare provides a mock function with given fields: ctx, id
func (_m *DBAdapter) GetFileShare(ctx context.Context, id string) (*model.FileShare, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.FileShare
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.FileShare); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FileShare)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileShareByName provides a mock function with given fields: ctx, id
func (_m *DBAdapter) GetFileShareByName(ctx context.Context, id string) (*model.FileShare, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.FileShare
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.FileShare); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FileShare)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFileShare provides a mock function with given fields: ctx, limit, offset, query
func (_m *DBAdapter) ListFileShare(ctx context.Context, limit int, offset int, query interface{}) ([]*model.FileShare, error) {
	ret := _m.Called(ctx, limit, offset, query)

	var r0 []*model.FileShare
	if rf, ok := ret.Get(0).(func(context.Context, int, int, interface{}) []*model.FileShare); ok {
		r0 = rf(ctx, limit, offset, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FileShare)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, interface{}) error); ok {
		r1 = rf(ctx, limit, offset, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFileShare provides a mock function with given fields: ctx, fileshare
func (_m *DBAdapter) UpdateFileShare(ctx context.Context, fileshare *model.FileShare) (*model.FileShare, error) {
	ret := _m.Called(ctx, fileshare)

	var r0 *model.FileShare
	if rf, ok := ret.Get(0).(func(context.Context, *model.FileShare) *model.FileShare); ok {
		r0 = rf(ctx, fileshare)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FileShare)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.FileShare) error); ok {
		r1 = rf(ctx, fileshare)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
