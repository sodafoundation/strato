// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/micro/go-micro/v2/client"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/opensds/multi-cloud/backend/proto"
)

// BackendService is an autogenerated mock type for the BackendService type
type BackendService struct {
	mock.Mock
}

// CreateBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) CreateBackend(ctx context.Context, in *proto.CreateBackendRequest, opts ...client.CallOption) (*proto.CreateBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CreateBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateBackendRequest, ...client.CallOption) *proto.CreateBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) DeleteBackend(ctx context.Context, in *proto.DeleteBackendRequest, opts ...client.CallOption) (*proto.DeleteBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.DeleteBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteBackendRequest, ...client.CallOption) *proto.DeleteBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) GetBackend(ctx context.Context, in *proto.GetBackendRequest, opts ...client.CallOption) (*proto.GetBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.GetBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBackendRequest, ...client.CallOption) *proto.GetBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) ListBackend(ctx context.Context, in *proto.ListBackendRequest, opts ...client.CallOption) (*proto.ListBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.ListBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListBackendRequest, ...client.CallOption) *proto.ListBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.ListBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListType provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) ListType(ctx context.Context, in *proto.ListTypeRequest, opts ...client.CallOption) (*proto.ListTypeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.ListTypeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListTypeRequest, ...client.CallOption) *proto.ListTypeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListTypeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.ListTypeRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) UpdateBackend(ctx context.Context, in *proto.UpdateBackendRequest, opts ...client.CallOption) (*proto.UpdateBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.UpdateBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateBackendRequest, ...client.CallOption) *proto.UpdateBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.UpdateBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
