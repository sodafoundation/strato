// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: backend.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Backend service

func NewBackendEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Backend service

type BackendService interface {
	CreateBackend(ctx context.Context, in *CreateBackendRequest, opts ...client.CallOption) (*CreateBackendResponse, error)
	GetBackend(ctx context.Context, in *GetBackendRequest, opts ...client.CallOption) (*GetBackendResponse, error)
	ListBackend(ctx context.Context, in *ListBackendRequest, opts ...client.CallOption) (*ListBackendResponse, error)
	UpdateBackend(ctx context.Context, in *UpdateBackendRequest, opts ...client.CallOption) (*UpdateBackendResponse, error)
	DeleteBackend(ctx context.Context, in *DeleteBackendRequest, opts ...client.CallOption) (*DeleteBackendResponse, error)
	ListType(ctx context.Context, in *ListTypeRequest, opts ...client.CallOption) (*ListTypeResponse, error)
}

type backendService struct {
	c    client.Client
	name string
}

func NewBackendService(name string, c client.Client) BackendService {
	return &backendService{
		c:    c,
		name: name,
	}
}

func (c *backendService) CreateBackend(ctx context.Context, in *CreateBackendRequest, opts ...client.CallOption) (*CreateBackendResponse, error) {
	req := c.c.NewRequest(c.name, "Backend.CreateBackend", in)
	out := new(CreateBackendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendService) GetBackend(ctx context.Context, in *GetBackendRequest, opts ...client.CallOption) (*GetBackendResponse, error) {
	req := c.c.NewRequest(c.name, "Backend.GetBackend", in)
	out := new(GetBackendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendService) ListBackend(ctx context.Context, in *ListBackendRequest, opts ...client.CallOption) (*ListBackendResponse, error) {
	req := c.c.NewRequest(c.name, "Backend.ListBackend", in)
	out := new(ListBackendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendService) UpdateBackend(ctx context.Context, in *UpdateBackendRequest, opts ...client.CallOption) (*UpdateBackendResponse, error) {
	req := c.c.NewRequest(c.name, "Backend.UpdateBackend", in)
	out := new(UpdateBackendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendService) DeleteBackend(ctx context.Context, in *DeleteBackendRequest, opts ...client.CallOption) (*DeleteBackendResponse, error) {
	req := c.c.NewRequest(c.name, "Backend.DeleteBackend", in)
	out := new(DeleteBackendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendService) ListType(ctx context.Context, in *ListTypeRequest, opts ...client.CallOption) (*ListTypeResponse, error) {
	req := c.c.NewRequest(c.name, "Backend.ListType", in)
	out := new(ListTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Backend service

type BackendHandler interface {
	CreateBackend(context.Context, *CreateBackendRequest, *CreateBackendResponse) error
	GetBackend(context.Context, *GetBackendRequest, *GetBackendResponse) error
	ListBackend(context.Context, *ListBackendRequest, *ListBackendResponse) error
	UpdateBackend(context.Context, *UpdateBackendRequest, *UpdateBackendResponse) error
	DeleteBackend(context.Context, *DeleteBackendRequest, *DeleteBackendResponse) error
	ListType(context.Context, *ListTypeRequest, *ListTypeResponse) error
}

func RegisterBackendHandler(s server.Server, hdlr BackendHandler, opts ...server.HandlerOption) error {
	type backend interface {
		CreateBackend(ctx context.Context, in *CreateBackendRequest, out *CreateBackendResponse) error
		GetBackend(ctx context.Context, in *GetBackendRequest, out *GetBackendResponse) error
		ListBackend(ctx context.Context, in *ListBackendRequest, out *ListBackendResponse) error
		UpdateBackend(ctx context.Context, in *UpdateBackendRequest, out *UpdateBackendResponse) error
		DeleteBackend(ctx context.Context, in *DeleteBackendRequest, out *DeleteBackendResponse) error
		ListType(ctx context.Context, in *ListTypeRequest, out *ListTypeResponse) error
	}
	type Backend struct {
		backend
	}
	h := &backendHandler{hdlr}
	return s.Handle(s.NewHandler(&Backend{h}, opts...))
}

type backendHandler struct {
	BackendHandler
}

func (h *backendHandler) CreateBackend(ctx context.Context, in *CreateBackendRequest, out *CreateBackendResponse) error {
	return h.BackendHandler.CreateBackend(ctx, in, out)
}

func (h *backendHandler) GetBackend(ctx context.Context, in *GetBackendRequest, out *GetBackendResponse) error {
	return h.BackendHandler.GetBackend(ctx, in, out)
}

func (h *backendHandler) ListBackend(ctx context.Context, in *ListBackendRequest, out *ListBackendResponse) error {
	return h.BackendHandler.ListBackend(ctx, in, out)
}

func (h *backendHandler) UpdateBackend(ctx context.Context, in *UpdateBackendRequest, out *UpdateBackendResponse) error {
	return h.BackendHandler.UpdateBackend(ctx, in, out)
}

func (h *backendHandler) DeleteBackend(ctx context.Context, in *DeleteBackendRequest, out *DeleteBackendResponse) error {
	return h.BackendHandler.DeleteBackend(ctx, in, out)
}

func (h *backendHandler) ListType(ctx context.Context, in *ListTypeRequest, out *ListTypeResponse) error {
	return h.BackendHandler.ListType(ctx, in, out)
}
