// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: metadata.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Metadata service

func NewMetadataEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Metadata service

type MetadataService interface {
	SyncMetadata(ctx context.Context, in *SyncMetadataRequest, opts ...client.CallOption) (*BaseResponse, error)
	ListMetadata(ctx context.Context, in *ListMetadataRequest, opts ...client.CallOption) (*ListMetadataResponse, error)
}

type metadataService struct {
	c    client.Client
	name string
}

func NewMetadataService(name string, c client.Client) MetadataService {
	return &metadataService{
		c:    c,
		name: name,
	}
}

func (c *metadataService) SyncMetadata(ctx context.Context, in *SyncMetadataRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "Metadata.SyncMetadata", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataService) ListMetadata(ctx context.Context, in *ListMetadataRequest, opts ...client.CallOption) (*ListMetadataResponse, error) {
	req := c.c.NewRequest(c.name, "Metadata.ListMetadata", in)
	out := new(ListMetadataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Metadata service

type MetadataHandler interface {
	SyncMetadata(context.Context, *SyncMetadataRequest, *BaseResponse) error
	ListMetadata(context.Context, *ListMetadataRequest, *ListMetadataResponse) error
}

func RegisterMetadataHandler(s server.Server, hdlr MetadataHandler, opts ...server.HandlerOption) error {
	type metadata interface {
		SyncMetadata(ctx context.Context, in *SyncMetadataRequest, out *BaseResponse) error
		ListMetadata(ctx context.Context, in *ListMetadataRequest, out *ListMetadataResponse) error
	}
	type Metadata struct {
		metadata
	}
	h := &metadataHandler{hdlr}
	return s.Handle(s.NewHandler(&Metadata{h}, opts...))
}

type metadataHandler struct {
	MetadataHandler
}

func (h *metadataHandler) SyncMetadata(ctx context.Context, in *SyncMetadataRequest, out *BaseResponse) error {
	return h.MetadataHandler.SyncMetadata(ctx, in, out)
}

func (h *metadataHandler) ListMetadata(ctx context.Context, in *ListMetadataRequest, out *ListMetadataResponse) error {
	return h.MetadataHandler.ListMetadata(ctx, in, out)
}
