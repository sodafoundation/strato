version: '2'

services:

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    restart: always

  kafka:
    image: wurstmeister/kafka:2.11-2.0.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime
    depends_on:
      - zookeeper
    restart: always

  api:
    image: sodafoundation/multi-cloud-api
    volumes:
      - /etc/ssl/certs:/etc/ssl/certs
      - /etc/localtime:/etc/localtime
      - /var/log/multi-cloud:/var/log/multi-cloud
      - ./examples/multi-cloud.conf:/etc/multi-cloud/multi-cloud.conf
    ports:
      - 8089:8089
    environment:
      - MICRO_SERVER_ADDRESS=:8089
      - MICRO_REGISTRY=mdns
      - OS_AUTH_AUTHSTRATEGY=keystone
      - OS_AUTH_URL=http://$HOST_IP/identity
      - OS_USER_DOMIN_ID=Default
      - OS_USERNAME=opensds
      - OS_PASSWORD=opensds@123
      - OS_PROJECT_NAME=service
      - TRANSFER_SPEED_MIN=10   #Bytes/Sec
      - SVC_FLAG=ctrl
    restart: always

  s3api:
    image: sodafoundation/multi-cloud-api
    volumes:
      - /etc/ssl/certs:/etc/ssl/certs
      - /etc/localtime:/etc/localtime
      - /var/log/multi-cloud:/var/log/multi-cloud
      - ./examples/multi-cloud.conf:/etc/multi-cloud/multi-cloud.conf
    ports:
      - 8090:8090
    environment:
      - MICRO_SERVER_ADDRESS=:8090
      - MICRO_REGISTRY=mdns
      - OS_AUTH_AUTHSTRATEGY=keystone
      - OS_AUTH_URL=http://$HOST_IP/identity
      - OS_USER_DOMIN_ID=Default
      - OS_USERNAME=opensds
      - OS_PASSWORD=opensds@123
      - OS_PROJECT_NAME=service
      - TRANSFER_SPEED_MIN=10   #Bytes/Sec
      - SVC_FLAG=s3
    restart: always

  backend:
    image: sodafoundation/multi-cloud-backend
    environment:
      - MICRO_REGISTRY=mdns
      - DB_HOST=datastore:27017
    volumes:
      - /etc/localtime:/etc/localtime
      - /var/log/multi-cloud:/var/log/multi-cloud
      - ./examples/multi-cloud.conf:/etc/multi-cloud/multi-cloud.conf
    depends_on:
      - datastore
    restart: always

  redis:
    image: redis
    container_name: redis
    command: redis-server
    ports:
      - "6379:6379"
    restart: always

  aksk:
    image: sodafoundation/multi-cloud-aksk
    environment:
      - MICRO_REGISTRY=mdns
      - IAM_HOST=$HOST_IP
    volumes:
      - /etc/localtime:/etc/localtime
      - /var/log/multi-cloud:/var/log/multi-cloud
      - ./examples/multi-cloud.conf:/etc/multi-cloud/multi-cloud.conf

  block:
    image: sodafoundation/multi-cloud-block
    environment:
      - MICRO_REGISTRY=mdns
      - DB_HOST=datastore:27017
    volumes:
      - /etc/localtime:/etc/localtime
      - /var/log/multi-cloud:/var/log/multi-cloud
      - ./examples/multi-cloud.conf:/etc/multi-cloud/multi-cloud.conf
    depends_on:
      - datastore
    restart: always
  
  file:
    image: sodafoundation/multi-cloud-file
    environment:
      - MICRO_REGISTRY=mdns
      - DB_HOST=datastore:27017
      - OS_AUTH_AUTHSTRATEGY=keystone
      - OS_AUTH_URL=http://$HOST_IP/identity
      - OS_USER_DOMIN_ID=Default
      - OS_USERNAME=opensds
      - OS_PASSWORD=opensds@123
      - OS_PROJECT_NAME=service
    volumes:
      - /etc/localtime:/etc/localtime
      - /var/log/multi-cloud:/var/log/multi-cloud
      - ./examples/multi-cloud.conf:/etc/multi-cloud/multi-cloud.conf
    depends_on:
      - datastore
    restart: always

  s3:
    image: sodafoundation/multi-cloud-s3
    environment:
      - MICRO_REGISTRY=mdns
      - DB_HOST=tidb:4000
      # 0 means use user defined storage class, otherwise use default storage class.
      - USE_DEFAULT_STORAGE_CLASS=1
    volumes:
      - /etc/localtime:/etc/localtime
      - /var/log/multi-cloud:/var/log/multi-cloud
      - ./s3/pkg/conf:/etc/multi-cloud
      - ./s3/pkg/datastore/yig/conf/:/etc/yig
      - /etc/ceph:/etc/ceph
      - ./examples/multi-cloud.conf:/etc/multi-cloud/multi-cloud.conf
      - ./s3/pkg/conf/tidb.sql:/etc/config/tidb/tidb.sql
      - ./s3/pkg/datastore/yig/conf/yig.sql:/etc/config/yig/yig.sql
    depends_on:
      - redis
      - tidb
    restart: always

  dataflow:
    image: sodafoundation/multi-cloud-dataflow
    environment:
      - MICRO_REGISTRY=mdns
      - DB_HOST=datastore:27017
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - LIFECYCLE_CRON_CONFIG=0 0 0 * * ?
    volumes:
      - /etc/localtime:/etc/localtime
      - /var/log/multi-cloud:/var/log/multi-cloud
      - ./examples/multi-cloud.conf:/etc/multi-cloud/multi-cloud.conf
    depends_on:
      - zookeeper
      - kafka
      - s3
      - datastore
    restart: always

  datamover:
    image: sodafoundation/multi-cloud-datamover
    volumes:
      - /etc/ssl/certs:/etc/ssl/certs
      - /etc/localtime:/etc/localtime
      - /var/log/multi-cloud:/var/log/multi-cloud
      - ./examples/multi-cloud.conf:/etc/multi-cloud/multi-cloud.conf
    environment:
      - MICRO_REGISTRY=mdns
      - DB_HOST=datastore:27017
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      # PARTSIZE for multi-part migration, should not be less than 5(MB) or more than 100(MB)
      - PARTSIZE=5
      # JOB_MAX_RUN_TIME for each migration job, should not be less than 60(seconds) or more than 2592000(seconds)
      - JOB_MAX_RUN_TIME=86400
      # For lifecycle, if object need to be moved from one place to another, how long this moving can continue, should
      # not be less than 60(seconds) or more than 2592000(seconds).
      - OBJECT_MOVE_TIME=3600
    depends_on:
      - zookeeper
      - kafka
      - datastore
    restart: always

  datastore:
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - ./mongodb_data:/data/db
    restart: always

  tidb:
    image: pingcap/tidb:v2.1.16
    container_name: tidb
    ports:
      - "4000:4000"
      - "10080:10080"
    volumes:
      - ./s3/tidbconf/tidb.toml:/tidb.toml:ro
      - ./tidb_data:/tmp/tidb
    command:
      - --store=mocktikv
      - --config=/tidb.toml
      - -L=info
    restart: always
