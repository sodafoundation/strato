syntax = "proto3";

option go_package = "s3/proto";

service S3 {
    rpc ListBuckets (ListBucketsRequest) returns (ListBucketsResponse) {
    }
    rpc CreateBucket (Bucket) returns (BaseResponse) {
    }
    rpc DeleteBucket (Bucket) returns (BaseResponse) {
    }
    rpc GetBucket (Bucket) returns (GetBucketResponse) {
    }
    rpc GetObjectMeta (GetObjectMetaRequest) returns (GetObjectMetaResult) {
    }
    rpc UpdateObjectMeta (Object) returns (PutObjectResponse) {
    }
    rpc ListObjects (ListObjectsRequest) returns (ListObjectsResponse) {
    }
    rpc CountObjects (ListObjectsRequest) returns (CountObjectsResponse) {
    }
    rpc PutObject (stream PutDataStream) returns (PutObjectResponse) {
    }
    rpc UpdateObject (Object) returns (BaseResponse) {
    }
    rpc GetObject (GetObjectInput) returns (stream GetObjectResponse) {
    }
    rpc DeleteObject (DeleteObjectInput) returns (DeleteObjectOutput) {
    }
    rpc GetTierMap (BaseRequest) returns (GetTierMapResponse) {
    }
    rpc UpdateObjMeta (UpdateObjMetaRequest) returns (BaseResponse) {
    }
    rpc GetStorageClasses (BaseRequest) returns (GetStorageClassesResponse) {
    }
    rpc GetBackendTypeByTier (GetBackendTypeByTierRequest) returns (GetBackendTypeByTierResponse) {
    }
    rpc DeleteBucketLifecycle (BaseRequest) returns (BaseResponse) {
    }
    rpc PutBucketLifecycle (PutBucketLifecycleRequest) returns (BaseResponse) {
    }
    rpc GetBucketLifecycle (BaseRequest) returns (GetBucketLifecycleResponse) {
    }
    rpc ListBucketLifecycle (BaseRequest) returns (ListBucketsResponse) {
    }
    rpc UpdateBucket (Bucket) returns (BaseResponse) {
    }
    rpc ListBucketUploadRecords (ListBucketUploadRequest) returns (ListBucketUploadResponse) {
    }

    rpc InitMultipartUpload (InitMultiPartRequest) returns (InitMultiPartResponse) {
    }
    rpc AbortMultipartUpload (AbortMultipartRequest) returns (BaseResponse) {
    }
    rpc CompleteMultipartUpload (CompleteMultipartRequest) returns (CompleteMultipartResponse) {
    }
    rpc UploadPart (stream PutDataStream) returns (UploadPartResponse) {
    }
    rpc ListObjectParts (ListObjectPartsRequest) returns (ListObjectPartsResponse) {
    }
    rpc AppendObject (BaseRequest) returns (BaseResponse) {
    }
    rpc PostObject (BaseRequest) returns (BaseResponse) {
    }

    // For lifecycle, may need some change.
    rpc AddUploadRecord (MultipartUploadRecord) returns (BaseResponse) {
    }
    rpc DeleteUploadRecord (MultipartUploadRecord) returns (BaseResponse) {
    }

    rpc HeadObject (BaseObjRequest) returns (Object) {
    }
    rpc MoveObject (MoveObjectRequest) returns (MoveObjectResponse) {
    }
    rpc CopyObject (CopyObjectRequest) returns (CopyObjectResponse) {
    }
    rpc CopyObjPart (CopyObjPartRequest) returns (CopyObjPartResponse) {
    }
    rpc PutObjACL (PutObjACLRequest) returns (BaseResponse) {
    }
    rpc GetObjACL (BaseObjRequest) returns (ObjACL) {
    }
    rpc GetBucketLocation (BaseRequest) returns (BaseResponse) {
    }
    rpc GetBucketVersioning (BaseBucketRequest) returns (BucketVersioning) {
    }
    rpc PutBucketACL (PutBucketACLRequest) returns (BaseResponse) {
    }
    rpc GetBucketACL (BaseBucketRequest) returns (BucketACL) {
    }
    rpc PutBucketCORS (BaseRequest) returns (BaseResponse) {
    }
    rpc GetBucketCORS (BaseRequest) returns (BaseResponse) {
    }
    rpc DeleteBucketCORS (BaseRequest) returns (BaseResponse) {
    }
    rpc PutBucketPolicy (BaseRequest) returns (BaseResponse) {
    }
    rpc GetBucketPolicy (BaseRequest) returns (BaseResponse) {
    }
    rpc DeleteBucketPolicy (BaseRequest) returns (BaseResponse) {
    }
    rpc HeadBucket (BaseRequest) returns (Bucket) {
    }
    rpc RestoreObject (RestoreObjectRequest) returns (BaseResponse) {
    }
    rpc BackendCheck (BackendDetailS3) returns (BaseResponse) {
    }
}

message ListObjectPartsRequest {
    string bucketName = 1;
    string objectKey = 2;
    string encodingType = 3;
    string uploadId = 4;
    int64 maxParts = 5;
    int64 partNumberMarker = 6;
}

message Part {
    int64 PartNumber = 1;
    string ETag = 2;
    string LastModified = 3;
    int64 Size = 4;
}

message ListObjectPartsResponse {
    int32 ErrorCode = 1;
    Owner Initiator = 2;
    Owner Owner = 3;
    string StorageClass = 4;
    int64 PartNumberMarker = 5;
    int64 NextPartNumberMarker = 6;
    int64 MaxParts = 7;
    bool IsTruncated = 8;
    repeated Part Parts = 9;
}

message AbortMultipartRequest {
    string bucketName = 1;
    string objectKey = 2;
    string uploadId = 3;
}

message CompletePart {
    int64 partNumber = 1;
    string eTag = 2;
}

message CompleteMultipartRequest {
    string bucketName = 1;
    string objectKey = 2;
    string uploadId = 3;
    repeated CompletePart completeParts = 4;
    string sourceVersionID = 5; // only for lifecycle
    string requestType = 6; // "" means end user, it's the default, lifecycle means lifecycle management
    int32 tier = 7;
}

message CompleteMultipartResponse {
    int32 errorCode = 1;
    string uploadID = 2;
    string eTag = 3;
}

message InitMultiPartRequest {
    string bucketName = 1;
    string objectKey = 2;
    Acl acl = 3;
    int32 tier = 4;
    string location = 5;
    map<string, string> attrs = 6;
}

message InitMultiPartResponse {
    int32 errorCode = 1;
    string uploadID = 2;
}

message PutDataStream {
    bytes data = 1;
}

message UploadPartRequest {
    string bucketName = 1;
    string objectKey = 2;
    string uploadId = 3;
    int32 partId = 4;
    int64 size = 5;
    string md5Hex = 6;
}

message UploadPartResponse {
    int32 errorCode = 1;
    string eTag = 2;
}

message CopyObjectRequest {
    string srcBucketName = 1;
    string targetBucketName = 2;
    string srcObjectName = 3;
    string targetObjectName = 4;
    string targetBackend = 5;
    int32 targetTier = 6;
    Acl    Acl = 7;
    map<string, string> customAttributes = 8;
}

message CopyObjectResponse {
    int32 errorCode = 1;
    string md5 = 2;
    int64 lastModified = 3;
    string versionId = 4;
}

message MoveObjectRequest {
    string srcObject = 1;
    string targetObject = 2;
    string srcBucket = 3;
    string targetBucket = 4;
    string targetLocation = 5;
    int32 targetTier = 6;
    int32 moveType = 7;
    string srcObjectVersion = 8;
}

message MoveObjectResponse {
    Object objMeta = 1;
    string status = 2;
    string md5 = 3;
    string versionId = 4;
    int64 lastModified = 5;
}

message HeaderValues {
    repeated string Values = 1;
}

message PutObjectRequest {
    string BucketName = 1;
    string ObjectKey = 2;
    Acl Acl = 3;
    map<string, string> attrs = 4;
    string location = 5;
    int64 size = 6;
    string contentType = 7;
    map<string, HeaderValues> headers = 8;
}

message GetObjectResponse {
    int32 errorCode = 1;
    bytes data = 2;
}

message GetObjectMetaRequest {
	string bucketName = 1;
	string objectKey = 2;
	string versionId = 3;
	bool isHeadReq = 4;
}

message GetObjectMetaResult {
    int32 errorCode = 1;
    Object object = 2;
    int64 expireTime = 3;
    string ruleId = 4;
}

message PutObjectResponse {
    int32 errorCode = 1;
    Object objMeta = 2;
    string status = 3;
    string md5 = 4;
    string versionId = 5;
    int64 lastModified = 6;
}

message PutBucketACLRequest {
    BucketACL ACLConfig = 1;
}

message BucketACL {
    string BucketName = 1;
    string CannedAcl = 2;
}

message BucketVersioning {
    string Status = 1;
}

message ObjACL {
    string BucketName = 1;
    string ObjectKey = 2;
    string CannedAcl = 3;
}

message PutObjACLRequest {
    string Context = 1;
    ObjACL ACLConfig = 2;
}

message BaseBucketRequest {
    string Context = 1;
    string BucketName = 2;
}

message BaseObjRequest {
    string Context = 1;
    string BucketName = 2;
    string ObjectKey = 3;
}

message CopyObjPartRequest {
    string SourceBucket = 1;
    string SourceObject = 2;
    string TargetBucket = 3;
    string TargetObject = 4;
    string TargetLocation = 5;
    string UploadID = 6;
    int64 PartID = 7;
    int64 ReadOffset = 8;
    int64 ReadLength = 9;
}

message CopyObjPartResponse {
    int32 ErrorCode = 1;
    int64 LastModified = 2;
    string Etag = 3;
}

message ServerSideEncryption {
    string sseType = 1;
    bytes encryptionKey = 2;
    bytes initilizationVector = 3;
}

message RedirectAllRequestsTo {
    string hostName = 1;
    repeated string protocol = 2;
}

message Redirect {
    string protocol = 1;
    string hostName = 2;
    string replaceKeyPrefixWith = 3;
    string replaceKeyWith = 4;
    string httpRedirectCode = 5;
}

message Condition {
    string keyPrefixEquals = 1;
    string httpErrorCodeReturnedEquals = 2;
}

message RoutingRules {
    Redirect redirect = 1;
    Condition condition = 2;
}

message WebsiteConfiguration {
    string indexDocument = 1;
    string errorDocument = 2;
    RedirectAllRequestsTo redirectAllRequestsTo = 3;
    repeated RoutingRules routingRules = 4;
}

message CORSConfiguration {
    string id = 1;
    string allowedMethods = 2;
    string allowedOrigins = 3;
    string allowedHeaders = 4;
    string maxAgeSeconds = 5;
    string exposedHeaders = 6;
}

message Destination {
    string bucket = 1;
    string storageClass = 2;
}

message ReplicationRole {
    string id = 1;
    string prefix = 2;
    bool enabled = 3;
    Destination destination = 4;
}

message ReplicationConfiguration {
    string role = 1;
    repeated ReplicationRole rules = 2;
}

message Tag {
    string key = 1;
    string val = 2;
}

message LifecycleFilter {
    //Object prefix for lifecycle filter
    string prefix = 1;
    //Tags will not be used for current release
    //repeated Tag tags = 2;
}

message Action {
    //Name of the action transition/expiration
    string name = 1; // expiration or transition
    //Days after creation of object
    int32 days = 2;
    //Delete marker in case of expiration for versioned bucket
    string deleteMarker = 3;
    //Storage class tier of the object where object is to be transitioned
    int32 tier = 4;
    // Destination backend of the object/bucket for Cross-cloud transition
    string backend = 5;
    // Destination bucket for specified backend for Cross-cloud transition
    string targetBucket = 6;

}

message AbortMultipartUpload {
    //Days after which the abort operation will be performed on incomplete upload
    int32 daysAfterInitiation = 1;
}

message LifecycleRule {
    string id = 1;
    string status = 2;
    LifecycleFilter filter = 3;
    repeated Action actions = 4;
    AbortMultipartUpload abortIncompleteMultipartUpload = 5;
}

message PutBucketLifecycleRequest {
    string bucketName = 1;
    repeated LifecycleRule lc = 2;
}

message GetBucketLifecycleResponse {
    int32 errorCode = 1;
    repeated LifecycleRule lc = 2;
}

message ReplicationInfo {
    string status = 1;
    string backend = 2;
    string storageClass = 3;
}

message Acl {
    string cannedAcl = 1;
}

message GetBucketResponse {
    int32 errorCode = 1;
    Bucket bucketMeta = 2;
}

message Bucket {
    string name = 1;
    string tenantId = 2;
    string userId = 3;
    Acl acl = 4;
    int64 createTime = 5;
    string id = 6;
    bool deleted = 7;
    ServerSideEncryption serverSideEncryption = 8;
    BucketVersioning versioning = 9;
    string defaultLocation = 10; // Means backend
    WebsiteConfiguration websiteConfiguration = 11;
    CORSConfiguration cors = 12;
    ReplicationConfiguration replicationConfiguration = 13;
    repeated LifecycleRule lifecycleConfiguration = 14;
    string bucketPolicy = 15;
    int64 usages = 16;
    int32 tier = 17;
    repeated ReplicationInfo replicationInfo = 18;
    string tiers = 19;
}

message Partion {
    string key = 1;
    int64 partNumber = 2;
    int64 size = 3;
    string etag = 4;
    int64 lastModified = 5;
}

message Version {
    string versionid = 1;
    string etag = 2;
    string isLatest = 3;
    int64 lastModified = 4;
    int64 size = 5;
}

message Object {
    string objectKey = 1;
    string bucketName = 2;
    string tenantId = 3;
    string userId = 4;
    string versionId = 5;
    string objectId = 6;
    string contentType = 7;
    string contentMd5 = 8;
    repeated Version versions = 9;
    string storageClass = 10;
    ServerSideEncryption serverSideEncryption = 11;
    string websiteRedirectLocation = 12;
    Acl acl = 13;
    string location = 14;
    bool isNull = 15;
    bool deleteMarker = 16;
    int64 size = 17;
    repeated Tag tags = 18;
    int64 lastModified = 19;
    string etag = 20;
    int32 tier = 21;
    int32 type = 22;
    bool nullVersion = 23;
    map<string, string> customAttributes = 24;
    string storageMeta = 25; // append info used by storage driver
    int64 encSize = 26;
}

message ListBucketsResponse {
    int32 errorCode = 1;
    repeated Bucket buckets = 2;
}

message BaseResponse {
    int32 errorCode = 1;
    string msg = 2;
}

message BaseRequest {
    string id = 1;
}

message ListObjectsRequest {
    string bucket = 1;
    bool versioned = 2; // should return versioned objects?
    int32 version = 3; // Currently 1 or 2
    string delimiter = 4;
    string encodingType = 5;
    int32 maxKeys = 6;
    string prefix = 7;

    // v1 specific
    string marker = 8;

    // v2 specific
    string continuationToken = 9;
    string startAfter = 10;
    bool fetchOwner = 11;

    // versioned specific
    string keyMarker = 12;
    string versionIdMarker = 13;

    // for internal use, for example, lifecycle management may need to filter objects by tier, or create time.
    map<string, string> filter = 14;
}

message ListObjectsResponse {
    int32 errorCode = 1;

    // Indicates whether the returned list objects response is truncated. A
    // value of true indicates that the list was truncated. The list can be truncated
    // if the number of objects exceeds the limit allowed or specified
    // by max keys.
    bool isTruncated = 2;

    // When response is truncated (the IsTruncated element value in the response
    // is true), you can use the key name in this field as marker in the subsequent
    // request to get next set of objects.
    //
    // NOTE: This element is returned only if you have delimiter request parameter
    // specified.
    string nextMarker = 3;

    // List of prefixes for this request.
    repeated string Prefixes = 4;

    // List of objects info for this request.
    repeated Object objects = 5;
}

message CountObjectsResponse {
    int64 Count = 1;
    int64 Size = 2;
}

message DeleteObjectInput {
    string bucket = 1;
    string key = 2;
    string versioId = 3;
    string storageMeta = 4;
    string eTag = 5;
    string objectId = 6;
}

message DeleteObjectOutput {
    int32 errorCode = 1;
    bool deleteMarker = 2;
    string versionId = 3;
}

message GetObjectInput {
    string Bucket = 1;
    string Key = 2;
    string VersionId = 3;
    int64 Offset = 4;
    int64 Length = 5;
}

message MultipartUpload {
    string bucket = 1;
    string key = 2;
    string uploadId = 3;
    string objectId = 4; // id used in backend
    string location = 5; // means backend
    int32 tier = 6;
}

message ListParts {
    string Bucket = 1;
    string Key = 2;
    string uploadId = 3;
    int64 MaxParts = 4;
    int64 PartNumberMarker = 5;
}

message TList {
    repeated int32 Tier = 1;
}

message Tier2ClassName {
    map<int32, string> lst = 1;
}

message GetTierMapResponse {
    repeated string Transition = 1; // format:[from:to from:to ....]
    map<string, Tier2ClassName> Tier2Name = 2;
}

message UpdateObjMetaRequest {
    string ObjKey = 1;
    string BucketName = 2;
    int64 LastModified = 3;
    map<string, string> Setting = 4;
}

message StorageClass {
    string Name = 1;
    int32 Tier = 2;
}

message GetStorageClassesResponse {
    repeated StorageClass classes = 1;
}

message GetBackendTypeByTierRequest {
    int32 Tier = 1;
}

message GetBackendTypeByTierResponse {
    repeated string Types = 1;
}

message MultipartUploadRecord {
    string ObjectKey = 1;
    string Bucket = 2;
    string Backend = 3;
    string UploadId = 4;
    int64 InitTime = 5;
    string tenantId = 6;
    string userId = 7;
}

message ListBucketUploadRequest {
    string bucketName = 1;
    string delimiter = 2;
    string encodingType = 3;
    int32 maxUploads = 4;
    string keyMarker = 5;
    string prefix = 6;
    string uploadIdMarker = 7;
}

message Owner {
    string id = 1;
    string displayName = 2;
}

message Upload {
    string key = 1;
    string uploadId = 2;
    Owner initiator = 3;
    Owner owner = 4;
    string storageClass = 5;
    string initiated = 6;
}

message ListBucketUploadResult {
    bool isTruncated = 1;
    string nextKeyMarker = 2;
    string nextUploadIdMarker = 3;
    repeated string commonPrefix = 4;
    repeated Upload uploads = 5;
}

message ListBucketUploadResponse {
    int32 errorCode = 1;
    ListBucketUploadResult result = 2;
}

message Restore{
    int64 days          = 1;
    string tier         = 2;
    string bucketName   = 3;
    string objectKey    = 4;
    string storageClass = 5;
}

message RestoreObjectRequest {
    Restore restore = 1;
}
message BackendDetailS3 {
	string id = 1;
	string tenantId = 2;
	string userId = 3;
	string name = 4;
	string type = 5;
	string region = 6;
	string endpoint = 7;
	string bucketName = 8;
	string access = 9;
	string security = 10;
}

message ListBucketsRequest {
	string id = 1;
	map<string, string> Filter = 2;
}
